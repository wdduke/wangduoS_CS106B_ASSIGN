Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Perfect Numbers
---------------

Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Q1. Roughly how long did it take your computer to do the search? How many perfect numbers were found and what were they?
A1. 
how long?
****************************************************************************************************
Correct (PROVIDED_TEST, perfect.cpp:119) Time trials of findPerfects on doubling input sizes
    Line 120 TIME_OPERATION findPerfects(10000) (size =    10000) completed in    0.252 secs
    Line 121 TIME_OPERATION findPerfects(20000) (size =    20000) completed in    0.544 secs
    Line 122 TIME_OPERATION findPerfects(40000) (size =    40000) completed in    1.613 secs
****************************************************************************************************
how many?what are they?
****************************************************************************************************
four perfect numbers up to 40000, they are 6, 28, 496, 8128
****************************************************************************************************


Q2. Record the timing results for `findPerfects` that you observed into a table.
A2. 	|size | time(s) |
	|:--: | -------:|
	|10000 | 0.265  |
	|20000 | 0.536  |
	|40000 | 1.615  |
	|80000 | 5.925  |
	|240000 | 51.815|
	|320000 | 91.981|


Q3. Does it take the same amount of work to compute `isPerfect` on the number 10 as it does on the number 1000? Why or why not? Does it take the same amount of work for `findPerfects` to search the range of numbers from 1-1000 as it does to search the numbers from 1000-2000? Why or why not?
A3. 	对于10与1000，函数`inPerfect`工作量一致，这是由于该函数是一个bool函数，返回true或false，对于特定的整数输入没有区别。
 
	对于搜索范围为1-1000的数，函数`findPerfect`中有循环的功能，这使得其的工作量与1000-2000时不一致。这是因为1000之前完全数有3个，而第4个完全数是8128，其间整数的数量大于1000个，穷举法需要搜索每一个数据，增大搜索范围后这需要很长时间。

Q4. Extrapolate from the data you gathered and make a prediction: how long will it take `findPerfects` to reach the fifth perfect number?
A4. 根据Q2的数据量-时间曲线，前4个完全数包含在10000以内，测试的时间为0.265s。第5个完全数为33550336，所需数据量为34000000，用二阶函数拟合曲线得$y=0.0896x^2+0.0008x+0.177，代入x=3400，算得y=1035778.897s，大约12天

Q5. Do any of the tests still pass even with this broken function? Why or why not?
A5. 函数`divisorSum`测试失败时，其他有些测试还是可以通过，原因是通过的这些测试的调用方式不同于未通过的测试：`EXPECT(!function)`形式的测试可以通过，而`EXPECT(function)`形式的测试不能通过。


Q6. Describe the testing strategy you used for your test cases to confirm `smarterSum` is working correctly.
A6. 先对1进行判断，输出为0；其他数都可被1整除，total初值为1，除数从2起，与待判断数字的平方根比较。
若可被除数整数，则将除数求和后再加除法的结果，如果为完全平方数，则需减去一个重复的除数。

Q7. Record your timing results for `findPerfectsSmarter` into a table.
A7. 	|size | time(s) |
	|:---: | -------:|
	|20000 | 0.204 |
	|80000 | 0.363 |
	|240000 | 0.970 |
	|320000 | 1.312 |
	|64000000 | 75.322|


Q8. Make a prediction: how long will `findPerfectsSmarter` take to reach the fifth perfect number?
A8. 根据Q7的数据量-时间曲线，前4个完全数包含在10000以内，测试20000个数据的时间为0.204s。第5个完全数为33550336，所需数据量为34000000，用线性函数拟合曲线得到y=0.0117x+0.5188y=0.0117x+0.5188，代入x=3400x=3400，算得y=40.2988\mathrm{s}y=40.2988s

Q9. Explain how you chose your specific test cases and why they lead you to be confident `findNthPerfectEuclid` is working correctly.
A9. 前四个完全数已经在之前得到了，用已知的结论做测试很正常，也很容易检查出函数的正确性

Soundex
-------

Q10. What is the Soundex code for "Angelou"? What is the code for your own surname?
A10. 	“Angelou"‘ s Soundex code is A524
	"Wang"'s Soundex code is W520

Q11. Before writing any code, brainstorm your plan of attack and sketch how you might decompose the work into smaller tasks. Briefly describe your decomposition strategy.
A11. 	0. 去除非字母字符
	1. 大写
	2. 字母编码化处理
	3. 相邻重复数字的处理
	4. 大写的首字母替换无相邻重复编码的第一位
	5. 删除所有的0
	6. 计算编码位数，不足四位最后补充0，超过四位删去四位之后的数字

Q12. Think about one or more examples of a class of names that the Soundex system might not work well for. Explain what this class of names is and why the system might incorrectly group them or mis-categorize one of the names.
A12. I DON'T KNOW


Q13. Suppose you are a software engineer working for the U.S. government. You have been tasked with implementing a system that collects names as part of the Census survey and analyzes these names using a phonetic algorithm. Your boss suggests using Soundex and notes that the algorithm is only expected to work for ASCII-encoded strings, since supporting Unicode would require extra work and time. What would your response be and why? What representational harms might result from building a system that exclusively uses Soundex and/or ASCII?
A13. I DON'T KNOW


